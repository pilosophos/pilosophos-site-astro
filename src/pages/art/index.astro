---
import { Image } from "astro:assets";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import { getCollection, getEntry, render } from 'astro:content';

const art = await getCollection('art');
---

<DefaultLayout title="Art">
  <main class="container">
    <div id="gallery" class="grid md:grid-cols-2 lg:grid-cols-3 justify-center gap-5 mx-auto">
      {
        art.map(async (piece, i) =>
          <a href={ '/art/' + piece.id } class="gallery-item mb-[10px] w-[350px] lg:w-[400px]">
            <Image
              src={ piece.data.cover }
              alt={ piece.data.title }
              quality="max"
              width={400}
              class="art-thumbnail"
              data-index={ i }
              data-art-id={ piece.id }
            />
          </a>
        )
      }
    </div>
  </main>
</DefaultLayout>

<script>
  import Masonry from 'masonry-layout';
  new Masonry('#gallery', {
    itemSelector: '.gallery-item',
    gutter: 10,
    fitWidth: true,
    transitionDuration: '0.2s',
  })
</script>

{
  // generate templates for image descriptions
  art.map(async (piece, i) => {
    const { Content } = await render(piece);

    return (
      <template id={ 'desc-' + piece.id }>
        <div>
          <h1 class="font-display text-4xl">{ piece.data.title }</h1>
          <Content />
        </div>
      </template>
    )
  })
}

{
  // generate templates for full-res images themselves
  art.map(async (piece, i) =>
    <template id={ 'image-' + piece.id }>
      <Image
        class="max-h-screen object-contain w-auto h-auto"
        src={ piece.data.cover }
        alt={ piece.data.title }
        quality="max"
        width={piece.data.cover.width}
      />
    </template>
  )
}

<div 
  id="viewer"
  class="hidden fixed left-0 top-0 w-screen h-screen bg-black/75"
>
  <article id="viewer__article" class="flex flex-col items-center lg:justify-between w-full h-full overflow-y-scroll lg:flex-row">
    <div id="viewer__main" class="flex-center relative w-full">

      <div id="viewer__image"></div>

      <button
        aria-label="Previous"
        id="viewer__prev"
        class="
          group absolute left-0 h-full flex-center px-3 bg-gradient-to-r from-black/30 to-transparent transition-all duration-200
          hover:ps-7 lg:px-5
        "
      >
        <div class="
          group-hover:opacity-90 flex-center w-6 h-6 rounded-full bg-white opacity-70 text-pi-gray text-2xl font-display box-shadow
          lg:w-8 lg:h-8 lg:text-3xl
        ">
          ←
        </div>
      </button>
      <button
        aria-label="Next"
        id="viewer__next"
        class="
          group absolute right-0 h-full flex-center px-3 bg-gradient-to-l from-black/30 to-transparent transition-all duration-200
          hover:pe-7 lg:px-5
        "
      >
        <div class="
          group-hover:opacity-90 flex-center w-6 h-6 rounded-full bg-white opacity-70 text-pi-gray text-2xl font-display box-shadow
          lg:w-8 lg:h-8 lg:text-3xl
        ">
          →
        </div>
      </button>
    </div>

    <div id="viewer__sidebar" class="flex flex-col bg-zinc-900 p-5 w-screen h-full lg:w-150 lg:h-screen lg:p-10">
      <nav class="pb-2 border-b border-stone-500 mb-3">
        <button id="viewer__close" class="muted hover:text-pi-cyan font-display lg:text-lg">
          &leftarrow; Back to gallery
        </button>
      </nav>
      <div id="viewer__desc" class="prose prose-invariants prose-headings:font-normal overflow-y-scroll"></div>
    </div>
  </article>
</div>

<script type="text/javascript">
  (function() {
    'use strict';

    const viewer = document.getElementById('viewer');
    const imgContainer = document.getElementById('viewer__image');
    const mainArea = document.getElementById('viewer__main');
    const descContainer = document.getElementById('viewer__desc');
    const nextBtn = document.getElementById('viewer__next');
    const prevBtn = document.getElementById('viewer__prev');

    function init() {
      // turn thumbnails into image viewer activators
      document.querySelectorAll('.art-thumbnail').forEach(
        thumb => thumb.addEventListener('click', event => {
          event.preventDefault();
          showViewer(thumb.dataset.artId);
        })
      );

      // show viewer if there's an art ID specified in the URL
      const artId = new URLSearchParams(window.location.search).get('image');
      if (artId) showViewer(artId);

      document.getElementById('viewer__close').addEventListener('click', hideViewer);
      mainArea.addEventListener('click', e => { if (e.target === mainArea) hideViewer() });
    }

    function showViewer(artId) {
      viewer.classList.remove('hidden');

      if (history.replaceState) {
        const newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?image=' + artId;
        window.history.replaceState({path:newurl}, '', newurl);
      }

      const image = document.getElementById('image-' + artId).content.cloneNode(true);
      imgContainer.innerHTML = '';
      imgContainer.append(image);

      const desc = document.getElementById('desc-' + artId).content.cloneNode(true);
      descContainer.innerHTML = '';
      descContainer.append(desc);

      let artIndex = document.querySelector(`[data-art-id='${artId}']`).dataset.index;
      artIndex = Number(artIndex)
      const nextArt = document.querySelector(`[data-index='${artIndex + 1}']`)?.dataset?.artId;
      if (nextArt) {
        nextBtn.onclick = () => showViewer(nextArt);
      }

      const prevArt = document.querySelector(`[data-index='${artIndex - 1}']`)?.dataset?.artId;
      if (prevArt) {
        prevBtn.onclick = () => showViewer(prevArt);
      }
    }

    function hideViewer() {
      viewer.classList.add('hidden');

      if (history.replaceState) {
        const newurl = window.location.protocol + "//" + window.location.host + window.location.pathname
        window.history.replaceState({path:newurl}, '', newurl);
      }
    }

    init();
  })();
</script>